digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
21 [label="21 @ N30\nmain\n" id="21"]
22 [label="22 @ N12\nmain\n" id="22"]
24 [label="24 @ N15\nmain\n" id="24"]
26 [label="26 @ N13\nmain\n" id="26"]
28 [label="28 @ N18\nmain\n" id="28"]
68 [fillcolor="cornflowerblue" label="68 @ N19\nmain\nAbstractionState: ABS9\n" id="68"]
69 [label="69 @ N20\nmain\n" id="69"]
72 [label="72 @ N27\nmain\n" id="72"]
73 [label="73 @ N1\n__VERIFIER_assert entry\n" id="73"]
74 [label="74 @ N2\n__VERIFIER_assert\n" id="74"]
76 [label="76 @ N3\n__VERIFIER_assert\n" id="76"]
78 [label="78 @ N0\n__VERIFIER_assert exit\n" id="78"]
79 [label="79 @ N28\nmain\n" id="79"]
80 [label="80 @ N29\nmain\n" id="80"]
82 [fillcolor="cornflowerblue" label="82 @ N19\nmain\nAbstractionState: ABS11\n" id="82"]
83 [label="83 @ N20\nmain\n" id="83"]
86 [label="86 @ N27\nmain\n" id="86"]
87 [label="87 @ N1\n__VERIFIER_assert entry\n" id="87"]
88 [label="88 @ N2\n__VERIFIER_assert\n" id="88"]
90 [label="90 @ N3\n__VERIFIER_assert\n" id="90"]
92 [label="92 @ N0\n__VERIFIER_assert exit\n" id="92"]
93 [label="93 @ N28\nmain\n" id="93"]
94 [label="94 @ N29\nmain\n" id="94"]
96 [fillcolor="cornflowerblue" label="96 @ N19\nmain\nAbstractionState: ABS13\n" id="96"]
97 [label="97 @ N20\nmain\n" id="97"]
100 [label="100 @ N27\nmain\n" id="100"]
101 [label="101 @ N1\n__VERIFIER_assert entry\n" id="101"]
102 [label="102 @ N2\n__VERIFIER_assert\n" id="102"]
103 [label="103 @ N4\n__VERIFIER_assert\n" id="103"]
106 [fillcolor="red" label="106 @ N5\n__VERIFIER_assert\nAbstractionState: ABS14\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="106"]
0 -> 21 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 21"]
21 -> 22 [color="red" label="Lines 7 - 16: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="21 -> 22"]
22 -> 24 [color="red" label="Line 17: \l[!(n < 100)]\l" id="22 -> 24"]
22 -> 27 [label="Line 17: \l[n < 100]\l" id="22 -> 27"]
24 -> 26 [color="red" label="Line 17: \l[!(n > 1000000)]\l" id="24 -> 26"]
24 -> 27 [label="Line 17: \l[n > 1000000]\l" id="24 -> 27"]
26 -> 28 [color="red" label="Lines 20 - 21: \lint y = n;\lint runtime_div;\l" id="26 -> 28"]
28 -> 68 [color="red" label="Line 23: \lwhile\l" id="28 -> 68"]
68 -> 69 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="68 -> 69"]
68 -> 70 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="68 -> 70"]
69 -> 72 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="69 -> 72"]
72 -> 73 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="72 -> 73"]
73 -> 74 [color="red" label="Line 0: \lFunction start dummy edge\l" id="73 -> 74"]
74 -> 75 [label="Line 8: \l[cond == 0]\l" id="74 -> 75"]
74 -> 76 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="74 -> 76"]
76 -> 78 [color="red" label="Line 0: \ldefault return\l" id="76 -> 78"]
78 -> 79 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="78 -> 79"]
79 -> 80 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="79 -> 80"]
80 -> 82 [color="red" label="Line 0: \l\l" id="80 -> 82"]
82 -> 83 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="82 -> 83"]
82 -> 84 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="82 -> 84"]
83 -> 86 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="83 -> 86"]
86 -> 87 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="86 -> 87"]
87 -> 88 [color="red" label="Line 0: \lFunction start dummy edge\l" id="87 -> 88"]
88 -> 89 [label="Line 8: \l[cond == 0]\l" id="88 -> 89"]
88 -> 90 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="88 -> 90"]
90 -> 92 [color="red" label="Line 0: \ldefault return\l" id="90 -> 92"]
92 -> 93 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="92 -> 93"]
93 -> 94 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="93 -> 94"]
94 -> 96 [color="red" label="Line 0: \l\l" id="94 -> 96"]
96 -> 97 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="96 -> 97"]
96 -> 98 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="96 -> 98"]
97 -> 100 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="97 -> 100"]
100 -> 101 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="100 -> 101"]
101 -> 102 [color="red" label="Line 0: \lFunction start dummy edge\l" id="101 -> 102"]
102 -> 103 [color="red" label="Line 8: \l[cond == 0]\l" id="102 -> 103"]
102 -> 104 [label="Line 8: \l[!(cond == 0)]\l" id="102 -> 104"]
103 -> 106 [color="red" label="Line 8: \lLabel: ERROR\l" id="103 -> 106"]
}
