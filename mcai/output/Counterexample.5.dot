digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
21 [label="21 @ N30\nmain\n" id="21"]
22 [label="22 @ N12\nmain\n" id="22"]
24 [label="24 @ N15\nmain\n" id="24"]
26 [label="26 @ N13\nmain\n" id="26"]
28 [label="28 @ N18\nmain\n" id="28"]
108 [fillcolor="cornflowerblue" label="108 @ N19\nmain\nAbstractionState: ABS15\n" id="108"]
109 [label="109 @ N20\nmain\n" id="109"]
112 [label="112 @ N27\nmain\n" id="112"]
113 [label="113 @ N1\n__VERIFIER_assert entry\n" id="113"]
114 [label="114 @ N2\n__VERIFIER_assert\n" id="114"]
116 [label="116 @ N3\n__VERIFIER_assert\n" id="116"]
118 [label="118 @ N0\n__VERIFIER_assert exit\n" id="118"]
119 [label="119 @ N28\nmain\n" id="119"]
120 [label="120 @ N29\nmain\n" id="120"]
122 [fillcolor="cornflowerblue" label="122 @ N19\nmain\nAbstractionState: ABS17\n" id="122"]
123 [label="123 @ N20\nmain\n" id="123"]
126 [label="126 @ N27\nmain\n" id="126"]
127 [label="127 @ N1\n__VERIFIER_assert entry\n" id="127"]
128 [label="128 @ N2\n__VERIFIER_assert\n" id="128"]
130 [label="130 @ N3\n__VERIFIER_assert\n" id="130"]
132 [label="132 @ N0\n__VERIFIER_assert exit\n" id="132"]
133 [label="133 @ N28\nmain\n" id="133"]
134 [label="134 @ N29\nmain\n" id="134"]
136 [fillcolor="cornflowerblue" label="136 @ N19\nmain\nAbstractionState: ABS19\n" id="136"]
137 [label="137 @ N20\nmain\n" id="137"]
140 [label="140 @ N27\nmain\n" id="140"]
141 [label="141 @ N1\n__VERIFIER_assert entry\n" id="141"]
142 [label="142 @ N2\n__VERIFIER_assert\n" id="142"]
144 [label="144 @ N3\n__VERIFIER_assert\n" id="144"]
146 [label="146 @ N0\n__VERIFIER_assert exit\n" id="146"]
147 [label="147 @ N28\nmain\n" id="147"]
148 [label="148 @ N29\nmain\n" id="148"]
150 [fillcolor="cornflowerblue" label="150 @ N19\nmain\nAbstractionState: ABS21\n" id="150"]
151 [label="151 @ N20\nmain\n" id="151"]
154 [label="154 @ N27\nmain\n" id="154"]
155 [label="155 @ N1\n__VERIFIER_assert entry\n" id="155"]
156 [label="156 @ N2\n__VERIFIER_assert\n" id="156"]
157 [label="157 @ N4\n__VERIFIER_assert\n" id="157"]
160 [fillcolor="red" label="160 @ N5\n__VERIFIER_assert\nAbstractionState: ABS22\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="160"]
0 -> 21 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 21"]
21 -> 22 [color="red" label="Lines 7 - 16: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="21 -> 22"]
22 -> 24 [color="red" label="Line 17: \l[!(n < 100)]\l" id="22 -> 24"]
22 -> 27 [label="Line 17: \l[n < 100]\l" id="22 -> 27"]
24 -> 26 [color="red" label="Line 17: \l[!(n > 1000000)]\l" id="24 -> 26"]
24 -> 27 [label="Line 17: \l[n > 1000000]\l" id="24 -> 27"]
26 -> 28 [color="red" label="Lines 20 - 21: \lint y = n;\lint runtime_div;\l" id="26 -> 28"]
28 -> 108 [color="red" label="Line 23: \lwhile\l" id="28 -> 108"]
108 -> 109 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="108 -> 109"]
108 -> 110 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="108 -> 110"]
109 -> 112 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="109 -> 112"]
112 -> 113 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="112 -> 113"]
113 -> 114 [color="red" label="Line 0: \lFunction start dummy edge\l" id="113 -> 114"]
114 -> 115 [label="Line 8: \l[cond == 0]\l" id="114 -> 115"]
114 -> 116 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="114 -> 116"]
116 -> 118 [color="red" label="Line 0: \ldefault return\l" id="116 -> 118"]
118 -> 119 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="118 -> 119"]
119 -> 120 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="119 -> 120"]
120 -> 122 [color="red" label="Line 0: \l\l" id="120 -> 122"]
122 -> 123 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="122 -> 123"]
122 -> 124 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="122 -> 124"]
123 -> 126 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="123 -> 126"]
126 -> 127 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="126 -> 127"]
127 -> 128 [color="red" label="Line 0: \lFunction start dummy edge\l" id="127 -> 128"]
128 -> 129 [label="Line 8: \l[cond == 0]\l" id="128 -> 129"]
128 -> 130 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="128 -> 130"]
130 -> 132 [color="red" label="Line 0: \ldefault return\l" id="130 -> 132"]
132 -> 133 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="132 -> 133"]
133 -> 134 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="133 -> 134"]
134 -> 136 [color="red" label="Line 0: \l\l" id="134 -> 136"]
136 -> 137 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="136 -> 137"]
136 -> 138 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="136 -> 138"]
137 -> 140 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="137 -> 140"]
140 -> 141 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="140 -> 141"]
141 -> 142 [color="red" label="Line 0: \lFunction start dummy edge\l" id="141 -> 142"]
142 -> 143 [label="Line 8: \l[cond == 0]\l" id="142 -> 143"]
142 -> 144 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="142 -> 144"]
144 -> 146 [color="red" label="Line 0: \ldefault return\l" id="144 -> 146"]
146 -> 147 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="146 -> 147"]
147 -> 148 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="147 -> 148"]
148 -> 150 [color="red" label="Line 0: \l\l" id="148 -> 150"]
150 -> 151 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="150 -> 151"]
150 -> 152 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="150 -> 152"]
151 -> 154 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="151 -> 154"]
154 -> 155 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="154 -> 155"]
155 -> 156 [color="red" label="Line 0: \lFunction start dummy edge\l" id="155 -> 156"]
156 -> 157 [color="red" label="Line 8: \l[cond == 0]\l" id="156 -> 157"]
156 -> 158 [label="Line 8: \l[!(cond == 0)]\l" id="156 -> 158"]
157 -> 160 [color="red" label="Line 8: \lLabel: ERROR\l" id="157 -> 160"]
}
