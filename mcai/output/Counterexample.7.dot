digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
21 [label="21 @ N30\nmain\n" id="21"]
22 [label="22 @ N12\nmain\n" id="22"]
24 [label="24 @ N15\nmain\n" id="24"]
26 [label="26 @ N13\nmain\n" id="26"]
28 [label="28 @ N18\nmain\n" id="28"]
230 [fillcolor="cornflowerblue" label="230 @ N19\nmain\nAbstractionState: ABS33\n" id="230"]
231 [label="231 @ N20\nmain\n" id="231"]
234 [label="234 @ N27\nmain\n" id="234"]
235 [label="235 @ N1\n__VERIFIER_assert entry\n" id="235"]
236 [label="236 @ N2\n__VERIFIER_assert\n" id="236"]
238 [label="238 @ N3\n__VERIFIER_assert\n" id="238"]
240 [label="240 @ N0\n__VERIFIER_assert exit\n" id="240"]
241 [label="241 @ N28\nmain\n" id="241"]
242 [label="242 @ N29\nmain\n" id="242"]
244 [fillcolor="cornflowerblue" label="244 @ N19\nmain\nAbstractionState: ABS35\n" id="244"]
245 [label="245 @ N20\nmain\n" id="245"]
248 [label="248 @ N27\nmain\n" id="248"]
249 [label="249 @ N1\n__VERIFIER_assert entry\n" id="249"]
250 [label="250 @ N2\n__VERIFIER_assert\n" id="250"]
252 [label="252 @ N3\n__VERIFIER_assert\n" id="252"]
254 [label="254 @ N0\n__VERIFIER_assert exit\n" id="254"]
255 [label="255 @ N28\nmain\n" id="255"]
256 [label="256 @ N29\nmain\n" id="256"]
258 [fillcolor="cornflowerblue" label="258 @ N19\nmain\nAbstractionState: ABS37\n" id="258"]
259 [label="259 @ N20\nmain\n" id="259"]
262 [label="262 @ N27\nmain\n" id="262"]
263 [label="263 @ N1\n__VERIFIER_assert entry\n" id="263"]
264 [label="264 @ N2\n__VERIFIER_assert\n" id="264"]
266 [label="266 @ N3\n__VERIFIER_assert\n" id="266"]
268 [label="268 @ N0\n__VERIFIER_assert exit\n" id="268"]
269 [label="269 @ N28\nmain\n" id="269"]
270 [label="270 @ N29\nmain\n" id="270"]
272 [fillcolor="cornflowerblue" label="272 @ N19\nmain\nAbstractionState: ABS39\n" id="272"]
273 [label="273 @ N20\nmain\n" id="273"]
276 [label="276 @ N27\nmain\n" id="276"]
277 [label="277 @ N1\n__VERIFIER_assert entry\n" id="277"]
278 [label="278 @ N2\n__VERIFIER_assert\n" id="278"]
280 [label="280 @ N3\n__VERIFIER_assert\n" id="280"]
282 [label="282 @ N0\n__VERIFIER_assert exit\n" id="282"]
283 [label="283 @ N28\nmain\n" id="283"]
284 [label="284 @ N29\nmain\n" id="284"]
286 [fillcolor="cornflowerblue" label="286 @ N19\nmain\nAbstractionState: ABS41\n" id="286"]
287 [label="287 @ N20\nmain\n" id="287"]
290 [label="290 @ N27\nmain\n" id="290"]
291 [label="291 @ N1\n__VERIFIER_assert entry\n" id="291"]
292 [label="292 @ N2\n__VERIFIER_assert\n" id="292"]
294 [label="294 @ N3\n__VERIFIER_assert\n" id="294"]
296 [label="296 @ N0\n__VERIFIER_assert exit\n" id="296"]
297 [label="297 @ N28\nmain\n" id="297"]
298 [label="298 @ N29\nmain\n" id="298"]
300 [fillcolor="cornflowerblue" label="300 @ N19\nmain\nAbstractionState: ABS43\n" id="300"]
301 [label="301 @ N20\nmain\n" id="301"]
304 [label="304 @ N27\nmain\n" id="304"]
305 [label="305 @ N1\n__VERIFIER_assert entry\n" id="305"]
306 [label="306 @ N2\n__VERIFIER_assert\n" id="306"]
307 [label="307 @ N4\n__VERIFIER_assert\n" id="307"]
310 [fillcolor="red" label="310 @ N5\n__VERIFIER_assert\nAbstractionState: ABS44\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="310"]
0 -> 21 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 21"]
21 -> 22 [color="red" label="Lines 7 - 16: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="21 -> 22"]
22 -> 24 [color="red" label="Line 17: \l[!(n < 100)]\l" id="22 -> 24"]
22 -> 27 [label="Line 17: \l[n < 100]\l" id="22 -> 27"]
24 -> 26 [color="red" label="Line 17: \l[!(n > 1000000)]\l" id="24 -> 26"]
24 -> 27 [label="Line 17: \l[n > 1000000]\l" id="24 -> 27"]
26 -> 28 [color="red" label="Lines 20 - 21: \lint y = n;\lint runtime_div;\l" id="26 -> 28"]
28 -> 230 [color="red" label="Line 23: \lwhile\l" id="28 -> 230"]
230 -> 231 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="230 -> 231"]
230 -> 232 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="230 -> 232"]
231 -> 234 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="231 -> 234"]
234 -> 235 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="234 -> 235"]
235 -> 236 [color="red" label="Line 0: \lFunction start dummy edge\l" id="235 -> 236"]
236 -> 237 [label="Line 8: \l[cond == 0]\l" id="236 -> 237"]
236 -> 238 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="236 -> 238"]
238 -> 240 [color="red" label="Line 0: \ldefault return\l" id="238 -> 240"]
240 -> 241 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="240 -> 241"]
241 -> 242 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="241 -> 242"]
242 -> 244 [color="red" label="Line 0: \l\l" id="242 -> 244"]
244 -> 245 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="244 -> 245"]
244 -> 246 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="244 -> 246"]
245 -> 248 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="245 -> 248"]
248 -> 249 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="248 -> 249"]
249 -> 250 [color="red" label="Line 0: \lFunction start dummy edge\l" id="249 -> 250"]
250 -> 251 [label="Line 8: \l[cond == 0]\l" id="250 -> 251"]
250 -> 252 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="250 -> 252"]
252 -> 254 [color="red" label="Line 0: \ldefault return\l" id="252 -> 254"]
254 -> 255 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="254 -> 255"]
255 -> 256 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="255 -> 256"]
256 -> 258 [color="red" label="Line 0: \l\l" id="256 -> 258"]
258 -> 259 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="258 -> 259"]
258 -> 260 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="258 -> 260"]
259 -> 262 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="259 -> 262"]
262 -> 263 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="262 -> 263"]
263 -> 264 [color="red" label="Line 0: \lFunction start dummy edge\l" id="263 -> 264"]
264 -> 265 [label="Line 8: \l[cond == 0]\l" id="264 -> 265"]
264 -> 266 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="264 -> 266"]
266 -> 268 [color="red" label="Line 0: \ldefault return\l" id="266 -> 268"]
268 -> 269 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="268 -> 269"]
269 -> 270 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="269 -> 270"]
270 -> 272 [color="red" label="Line 0: \l\l" id="270 -> 272"]
272 -> 273 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="272 -> 273"]
272 -> 274 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="272 -> 274"]
273 -> 276 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="273 -> 276"]
276 -> 277 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="276 -> 277"]
277 -> 278 [color="red" label="Line 0: \lFunction start dummy edge\l" id="277 -> 278"]
278 -> 279 [label="Line 8: \l[cond == 0]\l" id="278 -> 279"]
278 -> 280 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="278 -> 280"]
280 -> 282 [color="red" label="Line 0: \ldefault return\l" id="280 -> 282"]
282 -> 283 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="282 -> 283"]
283 -> 284 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="283 -> 284"]
284 -> 286 [color="red" label="Line 0: \l\l" id="284 -> 286"]
286 -> 287 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="286 -> 287"]
286 -> 288 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="286 -> 288"]
287 -> 290 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="287 -> 290"]
290 -> 291 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="290 -> 291"]
291 -> 292 [color="red" label="Line 0: \lFunction start dummy edge\l" id="291 -> 292"]
292 -> 293 [label="Line 8: \l[cond == 0]\l" id="292 -> 293"]
292 -> 294 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="292 -> 294"]
294 -> 296 [color="red" label="Line 0: \ldefault return\l" id="294 -> 296"]
296 -> 297 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="296 -> 297"]
297 -> 298 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="297 -> 298"]
298 -> 300 [color="red" label="Line 0: \l\l" id="298 -> 300"]
300 -> 301 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="300 -> 301"]
300 -> 302 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="300 -> 302"]
301 -> 304 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="301 -> 304"]
304 -> 305 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="304 -> 305"]
305 -> 306 [color="red" label="Line 0: \lFunction start dummy edge\l" id="305 -> 306"]
306 -> 307 [color="red" label="Line 8: \l[cond == 0]\l" id="306 -> 307"]
306 -> 308 [label="Line 8: \l[!(cond == 0)]\l" id="306 -> 308"]
307 -> 310 [color="red" label="Line 8: \lLabel: ERROR\l" id="307 -> 310"]
}
