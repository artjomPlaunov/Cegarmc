digraph CFA {
8 [shape="circle" label="N8\n28"]
30 [shape="circle" label="N30\n27"]
31 [shape="circle" label="N31\n26"]
32 [shape="circle" label="N32\n25"]
33 [shape="circle" label="N33\n24"]
34 [shape="circle" label="N34\n23"]
35 [shape="circle" label="N35\n22"]
36 [shape="circle" label="N36\n21"]
9 [shape="circle" label="N9\n20"]
10 [shape="circle" label="N10\n19"]
11 [shape="circle" label="N11\n18"]
12 [shape="diamond" label="N12\n17"]
15 [shape="diamond" label="N15\n16"]
13 [shape="circle" label="N13\n15"]
17 [shape="circle" label="N17\n14"]
18 [shape="circle" label="N18\n13"]
19 [shape="doublecircle" label="N19\n12"]
21 [shape="circle" label="N21\n11"]
7 [shape="circle" label="N7\n0"]
20 [shape="circle" label="N20\n10"]
22 [shape="circle" label="N22\n9"]
23 [shape="circle" label="N23\n8"]
24 [shape="circle" label="N24\n7"]
25 [shape="circle" label="N25\n6"]
26 [shape="circle" label="N26\n5"]
27 [shape="circle" label="N27\n4"]
1 [shape="circle" label="N1\n6"]
2 [shape="diamond" label="N2\n5"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
28 [shape="circle" label="N28\n3"]
29 [shape="circle" label="N29\n2"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
37 [shape="circle" label="N37\n0"]
14 [shape="circle" label="N14\n1"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
1 -> 2 [label="Function start dummy edge"]
2 -> 4 [label="[cond == 0]"]
2 -> 3 [label="[!(cond == 0)]"]
3 -> 0 [label="default return"]
4 -> 5 [label="Label: ERROR"]
5 -> 37 [label="abort();"]}
subgraph cluster_main {
label="main()"
8 -> 30 [label="INIT GLOBAL VARS"]
30 -> 31 [label="void abort();"]
31 -> 32 [label="void __VERIFIER_assert(int cond);"]
32 -> 33 [label="int __VERIFIER_nondet_int();"]
33 -> 34 [label="void __VERIFIER_assume(int);"]
34 -> 35 [label="void __VERIFIER_assert(int);"]
35 -> 36 [label="int main();"]
36 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="int x = 0;"]
10 -> 11 [label="int n;"]
11 -> 12 [label="n = __VERIFIER_nondet_int();"]
12 -> 14 [label="[n < 100]"]
12 -> 15 [label="[!(n < 100)]"]
15 -> 14 [label="[n > 1000000]"]
15 -> 13 [label="[!(n > 1000000)]"]
13 -> 17 [label="int y = n;"]
17 -> 18 [label="int runtime_div;"]
18 -> 19 [label="while"]
19 -> 20 [label="[(x + y) <= 999999]"]
19 -> 21 [label="[!((x + y) <= 999999)]"]
21 -> 7 [label="default return"]
20 -> 22 [label="const int __CPAchecker_TMP_0 = x;"]
22 -> 23 [label="x = x + 1;"]
23 -> 24 [label="__CPAchecker_TMP_0;"]
24 -> 25 [label="const int __CPAchecker_TMP_1 = y;"]
25 -> 26 [label="y = y - 1;"]
26 -> 27 [label="__CPAchecker_TMP_1;"]
27 -> 28 [label="__VERIFIER_assert((n - y) > 0);" style="dotted" arrowhead="empty"]
28 -> 29 [label="runtime_div = x / (n - y);"]
29 -> 19 [label=""]
14 -> 7 [label="return 0;"]}
27 -> 1 [label="__VERIFIER_assert((n - y) > 0)"]
0 -> 28 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);"]}