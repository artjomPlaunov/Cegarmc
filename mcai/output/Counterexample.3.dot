digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
21 [label="21 @ N30\nmain\n" id="21"]
22 [label="22 @ N12\nmain\n" id="22"]
24 [label="24 @ N15\nmain\n" id="24"]
26 [label="26 @ N13\nmain\n" id="26"]
28 [label="28 @ N18\nmain\n" id="28"]
42 [fillcolor="cornflowerblue" label="42 @ N19\nmain\nAbstractionState: ABS5\n" id="42"]
43 [label="43 @ N20\nmain\n" id="43"]
46 [label="46 @ N27\nmain\n" id="46"]
47 [label="47 @ N1\n__VERIFIER_assert entry\n" id="47"]
48 [label="48 @ N2\n__VERIFIER_assert\n" id="48"]
50 [label="50 @ N3\n__VERIFIER_assert\n" id="50"]
52 [label="52 @ N0\n__VERIFIER_assert exit\n" id="52"]
53 [label="53 @ N28\nmain\n" id="53"]
54 [label="54 @ N29\nmain\n" id="54"]
56 [fillcolor="cornflowerblue" label="56 @ N19\nmain\nAbstractionState: ABS7\n" id="56"]
57 [label="57 @ N20\nmain\n" id="57"]
60 [label="60 @ N27\nmain\n" id="60"]
61 [label="61 @ N1\n__VERIFIER_assert entry\n" id="61"]
62 [label="62 @ N2\n__VERIFIER_assert\n" id="62"]
63 [label="63 @ N4\n__VERIFIER_assert\n" id="63"]
66 [fillcolor="red" label="66 @ N5\n__VERIFIER_assert\nAbstractionState: ABS8\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="66"]
0 -> 21 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 21"]
21 -> 22 [color="red" label="Lines 7 - 16: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="21 -> 22"]
22 -> 24 [color="red" label="Line 17: \l[!(n < 100)]\l" id="22 -> 24"]
22 -> 27 [label="Line 17: \l[n < 100]\l" id="22 -> 27"]
24 -> 26 [color="red" label="Line 17: \l[!(n > 1000000)]\l" id="24 -> 26"]
24 -> 27 [label="Line 17: \l[n > 1000000]\l" id="24 -> 27"]
26 -> 28 [color="red" label="Lines 20 - 21: \lint y = n;\lint runtime_div;\l" id="26 -> 28"]
28 -> 42 [color="red" label="Line 23: \lwhile\l" id="28 -> 42"]
42 -> 43 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="42 -> 43"]
42 -> 44 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="42 -> 44"]
43 -> 46 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="43 -> 46"]
46 -> 47 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="46 -> 47"]
47 -> 48 [color="red" label="Line 0: \lFunction start dummy edge\l" id="47 -> 48"]
48 -> 49 [label="Line 8: \l[cond == 0]\l" id="48 -> 49"]
48 -> 50 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="48 -> 50"]
50 -> 52 [color="red" label="Line 0: \ldefault return\l" id="50 -> 52"]
52 -> 53 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="52 -> 53"]
53 -> 54 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="53 -> 54"]
54 -> 56 [color="red" label="Line 0: \l\l" id="54 -> 56"]
56 -> 57 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="56 -> 57"]
56 -> 58 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="56 -> 58"]
57 -> 60 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="57 -> 60"]
60 -> 61 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="60 -> 61"]
61 -> 62 [color="red" label="Line 0: \lFunction start dummy edge\l" id="61 -> 62"]
62 -> 63 [color="red" label="Line 8: \l[cond == 0]\l" id="62 -> 63"]
62 -> 64 [label="Line 8: \l[!(cond == 0)]\l" id="62 -> 64"]
63 -> 66 [color="red" label="Line 8: \lLabel: ERROR\l" id="63 -> 66"]
}
