digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
21 [label="21 @ N30\nmain\n" id="21"]
22 [label="22 @ N12\nmain\n" id="22"]
24 [label="24 @ N15\nmain\n" id="24"]
26 [label="26 @ N13\nmain\n" id="26"]
28 [label="28 @ N18\nmain\n" id="28"]
312 [fillcolor="cornflowerblue" label="312 @ N19\nmain\nAbstractionState: ABS45\n" id="312"]
313 [label="313 @ N20\nmain\n" id="313"]
316 [label="316 @ N27\nmain\n" id="316"]
317 [label="317 @ N1\n__VERIFIER_assert entry\n" id="317"]
318 [label="318 @ N2\n__VERIFIER_assert\n" id="318"]
320 [label="320 @ N3\n__VERIFIER_assert\n" id="320"]
322 [label="322 @ N0\n__VERIFIER_assert exit\n" id="322"]
323 [label="323 @ N28\nmain\n" id="323"]
324 [label="324 @ N29\nmain\n" id="324"]
326 [fillcolor="cornflowerblue" label="326 @ N19\nmain\nAbstractionState: ABS47\n" id="326"]
327 [label="327 @ N20\nmain\n" id="327"]
330 [label="330 @ N27\nmain\n" id="330"]
331 [label="331 @ N1\n__VERIFIER_assert entry\n" id="331"]
332 [label="332 @ N2\n__VERIFIER_assert\n" id="332"]
334 [label="334 @ N3\n__VERIFIER_assert\n" id="334"]
336 [label="336 @ N0\n__VERIFIER_assert exit\n" id="336"]
337 [label="337 @ N28\nmain\n" id="337"]
338 [label="338 @ N29\nmain\n" id="338"]
340 [fillcolor="cornflowerblue" label="340 @ N19\nmain\nAbstractionState: ABS49\n" id="340"]
341 [label="341 @ N20\nmain\n" id="341"]
344 [label="344 @ N27\nmain\n" id="344"]
345 [label="345 @ N1\n__VERIFIER_assert entry\n" id="345"]
346 [label="346 @ N2\n__VERIFIER_assert\n" id="346"]
348 [label="348 @ N3\n__VERIFIER_assert\n" id="348"]
350 [label="350 @ N0\n__VERIFIER_assert exit\n" id="350"]
351 [label="351 @ N28\nmain\n" id="351"]
352 [label="352 @ N29\nmain\n" id="352"]
354 [fillcolor="cornflowerblue" label="354 @ N19\nmain\nAbstractionState: ABS51\n" id="354"]
355 [label="355 @ N20\nmain\n" id="355"]
358 [label="358 @ N27\nmain\n" id="358"]
359 [label="359 @ N1\n__VERIFIER_assert entry\n" id="359"]
360 [label="360 @ N2\n__VERIFIER_assert\n" id="360"]
362 [label="362 @ N3\n__VERIFIER_assert\n" id="362"]
364 [label="364 @ N0\n__VERIFIER_assert exit\n" id="364"]
365 [label="365 @ N28\nmain\n" id="365"]
366 [label="366 @ N29\nmain\n" id="366"]
368 [fillcolor="cornflowerblue" label="368 @ N19\nmain\nAbstractionState: ABS53\n" id="368"]
369 [label="369 @ N20\nmain\n" id="369"]
372 [label="372 @ N27\nmain\n" id="372"]
373 [label="373 @ N1\n__VERIFIER_assert entry\n" id="373"]
374 [label="374 @ N2\n__VERIFIER_assert\n" id="374"]
376 [label="376 @ N3\n__VERIFIER_assert\n" id="376"]
378 [label="378 @ N0\n__VERIFIER_assert exit\n" id="378"]
379 [label="379 @ N28\nmain\n" id="379"]
380 [label="380 @ N29\nmain\n" id="380"]
382 [fillcolor="cornflowerblue" label="382 @ N19\nmain\nAbstractionState: ABS55\n" id="382"]
383 [label="383 @ N20\nmain\n" id="383"]
386 [label="386 @ N27\nmain\n" id="386"]
387 [label="387 @ N1\n__VERIFIER_assert entry\n" id="387"]
388 [label="388 @ N2\n__VERIFIER_assert\n" id="388"]
390 [label="390 @ N3\n__VERIFIER_assert\n" id="390"]
392 [label="392 @ N0\n__VERIFIER_assert exit\n" id="392"]
393 [label="393 @ N28\nmain\n" id="393"]
394 [label="394 @ N29\nmain\n" id="394"]
396 [fillcolor="cornflowerblue" label="396 @ N19\nmain\nAbstractionState: ABS57\n" id="396"]
397 [label="397 @ N20\nmain\n" id="397"]
400 [label="400 @ N27\nmain\n" id="400"]
401 [label="401 @ N1\n__VERIFIER_assert entry\n" id="401"]
402 [label="402 @ N2\n__VERIFIER_assert\n" id="402"]
403 [label="403 @ N4\n__VERIFIER_assert\n" id="403"]
406 [fillcolor="red" label="406 @ N5\n__VERIFIER_assert\nAbstractionState: ABS58\n AutomatonState: ErrorLabelAutomaton: _predefinedState_ERROR\n" id="406"]
0 -> 21 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 21"]
21 -> 22 [color="red" label="Lines 7 - 16: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint x = 0;\lint n;\ln = __VERIFIER_nondet_int();\l" id="21 -> 22"]
22 -> 24 [color="red" label="Line 17: \l[!(n < 100)]\l" id="22 -> 24"]
22 -> 27 [label="Line 17: \l[n < 100]\l" id="22 -> 27"]
24 -> 26 [color="red" label="Line 17: \l[!(n > 1000000)]\l" id="24 -> 26"]
24 -> 27 [label="Line 17: \l[n > 1000000]\l" id="24 -> 27"]
26 -> 28 [color="red" label="Lines 20 - 21: \lint y = n;\lint runtime_div;\l" id="26 -> 28"]
28 -> 312 [color="red" label="Line 23: \lwhile\l" id="28 -> 312"]
312 -> 313 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="312 -> 313"]
312 -> 314 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="312 -> 314"]
313 -> 316 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="313 -> 316"]
316 -> 317 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="316 -> 317"]
317 -> 318 [color="red" label="Line 0: \lFunction start dummy edge\l" id="317 -> 318"]
318 -> 319 [label="Line 8: \l[cond == 0]\l" id="318 -> 319"]
318 -> 320 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="318 -> 320"]
320 -> 322 [color="red" label="Line 0: \ldefault return\l" id="320 -> 322"]
322 -> 323 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="322 -> 323"]
323 -> 324 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="323 -> 324"]
324 -> 326 [color="red" label="Line 0: \l\l" id="324 -> 326"]
326 -> 327 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="326 -> 327"]
326 -> 328 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="326 -> 328"]
327 -> 330 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="327 -> 330"]
330 -> 331 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="330 -> 331"]
331 -> 332 [color="red" label="Line 0: \lFunction start dummy edge\l" id="331 -> 332"]
332 -> 333 [label="Line 8: \l[cond == 0]\l" id="332 -> 333"]
332 -> 334 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="332 -> 334"]
334 -> 336 [color="red" label="Line 0: \ldefault return\l" id="334 -> 336"]
336 -> 337 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="336 -> 337"]
337 -> 338 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="337 -> 338"]
338 -> 340 [color="red" label="Line 0: \l\l" id="338 -> 340"]
340 -> 341 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="340 -> 341"]
340 -> 342 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="340 -> 342"]
341 -> 344 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="341 -> 344"]
344 -> 345 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="344 -> 345"]
345 -> 346 [color="red" label="Line 0: \lFunction start dummy edge\l" id="345 -> 346"]
346 -> 347 [label="Line 8: \l[cond == 0]\l" id="346 -> 347"]
346 -> 348 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="346 -> 348"]
348 -> 350 [color="red" label="Line 0: \ldefault return\l" id="348 -> 350"]
350 -> 351 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="350 -> 351"]
351 -> 352 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="351 -> 352"]
352 -> 354 [color="red" label="Line 0: \l\l" id="352 -> 354"]
354 -> 355 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="354 -> 355"]
354 -> 356 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="354 -> 356"]
355 -> 358 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="355 -> 358"]
358 -> 359 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="358 -> 359"]
359 -> 360 [color="red" label="Line 0: \lFunction start dummy edge\l" id="359 -> 360"]
360 -> 361 [label="Line 8: \l[cond == 0]\l" id="360 -> 361"]
360 -> 362 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="360 -> 362"]
362 -> 364 [color="red" label="Line 0: \ldefault return\l" id="362 -> 364"]
364 -> 365 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="364 -> 365"]
365 -> 366 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="365 -> 366"]
366 -> 368 [color="red" label="Line 0: \l\l" id="366 -> 368"]
368 -> 369 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="368 -> 369"]
368 -> 370 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="368 -> 370"]
369 -> 372 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="369 -> 372"]
372 -> 373 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="372 -> 373"]
373 -> 374 [color="red" label="Line 0: \lFunction start dummy edge\l" id="373 -> 374"]
374 -> 375 [label="Line 8: \l[cond == 0]\l" id="374 -> 375"]
374 -> 376 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="374 -> 376"]
376 -> 378 [color="red" label="Line 0: \ldefault return\l" id="376 -> 378"]
378 -> 379 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="378 -> 379"]
379 -> 380 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="379 -> 380"]
380 -> 382 [color="red" label="Line 0: \l\l" id="380 -> 382"]
382 -> 383 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="382 -> 383"]
382 -> 384 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="382 -> 384"]
383 -> 386 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="383 -> 386"]
386 -> 387 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="386 -> 387"]
387 -> 388 [color="red" label="Line 0: \lFunction start dummy edge\l" id="387 -> 388"]
388 -> 389 [label="Line 8: \l[cond == 0]\l" id="388 -> 389"]
388 -> 390 [color="red" label="Line 8: \l[!(cond == 0)]\l" id="388 -> 390"]
390 -> 392 [color="red" label="Line 0: \ldefault return\l" id="390 -> 392"]
392 -> 393 [color="red" label="Line 26: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert((n - y) > 0);\l" id="392 -> 393"]
393 -> 394 [color="red" label="Line 27: \lruntime_div = x / (n - y);\l" id="393 -> 394"]
394 -> 396 [color="red" label="Line 0: \l\l" id="394 -> 396"]
396 -> 397 [color="red" label="Line 23: \l[(x + y) <= 999999]\l" id="396 -> 397"]
396 -> 398 [label="Line 23: \l[!((x + y) <= 999999)]\l" id="396 -> 398"]
397 -> 400 [color="red" label="Lines 24 - 25: \lconst int __CPAchecker_TMP_0 = x;\lx = x + 1;\l__CPAchecker_TMP_0;\lconst int __CPAchecker_TMP_1 = y;\ly = y - 1;\l__CPAchecker_TMP_1;\l" id="397 -> 400"]
400 -> 401 [color="red" label="Line 26: \l__VERIFIER_assert((n - y) > 0)\l" id="400 -> 401"]
401 -> 402 [color="red" label="Line 0: \lFunction start dummy edge\l" id="401 -> 402"]
402 -> 403 [color="red" label="Line 8: \l[cond == 0]\l" id="402 -> 403"]
402 -> 404 [label="Line 8: \l[!(cond == 0)]\l" id="402 -> 404"]
403 -> 406 [color="red" label="Line 8: \lLabel: ERROR\l" id="403 -> 406"]
}
