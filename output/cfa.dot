digraph CFA {
8 [shape="circle" label="N8\n19"]
21 [shape="circle" label="N21\n18"]
22 [shape="circle" label="N22\n17"]
23 [shape="circle" label="N23\n16"]
24 [shape="circle" label="N24\n15"]
25 [shape="circle" label="N25\n14"]
26 [shape="circle" label="N26\n13"]
27 [shape="circle" label="N27\n12"]
9 [shape="circle" label="N9\n11"]
10 [shape="circle" label="N10\n10"]
11 [shape="circle" label="N11\n9"]
12 [shape="circle" label="N12\n8"]
1 [shape="circle" label="N1\n6"]
2 [shape="diamond" label="N2\n5"]
3 [shape="circle" label="N3\n1"]
0 [shape="circle" label="N0\n0"]
13 [shape="diamond" label="N13\n7"]
16 [shape="circle" label="N16\n6"]
18 [shape="circle" label="N18\n5"]
14 [shape="circle" label="N14\n2"]
19 [shape="circle" label="N19\n1"]
7 [shape="circle" label="N7\n0"]
15 [shape="circle" label="N15\n4"]
17 [shape="circle" label="N17\n3"]
4 [shape="circle" label="N4\n4"]
5 [shape="circle" label="N5\n3"]
28 [shape="circle" label="N28\n0"]
node [shape="circle"]
subgraph cluster___VERIFIER_assert {
label="__VERIFIER_assert()"
1 -> 2 [label="Function start dummy edge"]
2 -> 4 [label="[cond == 0]"]
2 -> 3 [label="[!(cond == 0)]"]
3 -> 0 [label="default return"]
4 -> 5 [label="Label: ERROR"]
5 -> 28 [label="abort();"]}
subgraph cluster_main {
label="main()"
8 -> 21 [label="INIT GLOBAL VARS"]
21 -> 22 [label="void abort();"]
22 -> 23 [label="void __VERIFIER_assert(int cond);"]
23 -> 24 [label="int __VERIFIER_nondet_int();"]
24 -> 25 [label="void __VERIFIER_assume(int);"]
25 -> 26 [label="void __VERIFIER_assert(int);"]
26 -> 27 [label="int main();"]
27 -> 9 [label="Function start dummy edge"]
9 -> 10 [label="int __retres;"]
10 -> 11 [label="int x = 5;"]
11 -> 12 [label="int y = 6;"]
12 -> 13 [label="__VERIFIER_assert(x == y);" style="dotted" arrowhead="empty"]
13 -> 15 [label="[x == y]"]
13 -> 16 [label="[!(x == y)]"]
16 -> 18 [label="int y_1 = 7;"]
18 -> 14 [label=""]
14 -> 19 [label="__retres = 0;"]
19 -> 7 [label="return __retres;"]
15 -> 17 [label="int y_0 = 6;"]
17 -> 14 [label=""]}
12 -> 1 [label="__VERIFIER_assert(x == y)"]
0 -> 13 [label="Return edge from __VERIFIER_assert to main: __VERIFIER_assert(x == y);"]}