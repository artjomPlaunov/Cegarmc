digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
9 [label="9 @ N21\nmain\n" id="9"]
10 [label="10 @ N12\nmain\n" id="10"]
11 [label="11 @ N1\n__VERIFIER_assert entry\n" id="11"]
12 [label="12 @ N2\n__VERIFIER_assert\n" id="12"]
14 [label="14 @ N3\n__VERIFIER_assert\n" id="14"]
16 [label="16 @ N0\n__VERIFIER_assert exit\n" id="16"]
17 [label="17 @ N13\nmain\n" id="17"]
19 [label="19 @ N16\nmain\n" id="19"]
20 [label="20 @ N18\nmain\n" id="20"]
24 [label="24 @ N14\nmain\n" id="24"]
25 [label="25 @ N19\nmain\n" id="25"]
26 [label="26 @ N7\nmain exit\n" id="26"]
18 [label="18 @ N15\nmain\n" id="18"]
22 [label="22 @ N17\nmain\n" id="22"]
13 [label="13 @ N4\n__VERIFIER_assert\n" id="13"]
0 -> 9 [label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 9"]
9 -> 10 [label="Lines 1 - 12: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint __retres;\lint x = 6;\lint y = 6;\l" id="9 -> 10"]
10 -> 11 [label="Line 13: \l__VERIFIER_assert(x == y)\l" id="10 -> 11"]
11 -> 12 [label="Line 0: \lFunction start dummy edge\l" id="11 -> 12"]
12 -> 13 [label="Line 2: \l[cond == 0]\l" id="12 -> 13"]
12 -> 14 [label="Line 2: \l[!(cond == 0)]\l" id="12 -> 14"]
14 -> 16 [label="Line 0: \ldefault return\l" id="14 -> 16"]
16 -> 17 [label="Line 13: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(x == y);\l" id="16 -> 17"]
17 -> 18 [label="Line 15: \l[x == y]\l" id="17 -> 18"]
17 -> 19 [label="Line 15: \l[!(x == y)]\l" id="17 -> 19"]
19 -> 20 [label="Line 19: \lint y_1 = 7;\l" id="19 -> 20"]
20 -> 24 [label="Line 0: \l\l" id="20 -> 24"]
24 -> 25 [label="Line 21: \l__retres = 0;\l" id="24 -> 25"]
25 -> 26 [label="Line 22: \lreturn __retres;\l" id="25 -> 26"]
18 -> 22 [label="Line 16: \lint y_0 = 6;\l" id="18 -> 22"]
22 -> 24 [label="Line 0: \l\l" id="22 -> 24"]
}
