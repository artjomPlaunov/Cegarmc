digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N8\nmain entry\nAbstractionState: ABS0: true\n" id="0"]
1 [label="1 @ N21\nmain\n" id="1"]
2 [label="2 @ N12\nmain\n" id="2"]
3 [label="3 @ N1\n__VERIFIER_assert entry\n" id="3"]
4 [label="4 @ N2\n__VERIFIER_assert\n" id="4"]
6 [label="6 @ N3\n__VERIFIER_assert\n" id="6"]
10 [label="10 @ N0\n__VERIFIER_assert exit\n" id="10"]
11 [label="11 @ N13\nmain\n" id="11"]
13 [label="13 @ N16\nmain\n" id="13"]
14 [label="14 @ N18\nmain\n" id="14"]
18 [label="18 @ N14\nmain\n" id="18"]
19 [label="19 @ N19\nmain\n" id="19"]
20 [label="20 @ N7\nmain exit\n" id="20"]
12 [label="12 @ N15\nmain\n" id="12"]
16 [label="16 @ N17\nmain\n" id="16"]
5 [label="5 @ N4\n__VERIFIER_assert\n" id="5"]
0 -> 1 [label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [label="Lines 1 - 12: \lvoid abort();\lvoid __VERIFIER_assert(int cond);\lint __VERIFIER_nondet_int();\lvoid __VERIFIER_assume(int);\lvoid __VERIFIER_assert(int);\lint main();\lFunction start dummy edge\lint __retres;\lint x = 6;\lint y = 6;\l" id="1 -> 2"]
2 -> 3 [label="Line 13: \l__VERIFIER_assert(x == y)\l" id="2 -> 3"]
3 -> 4 [label="Line 0: \lFunction start dummy edge\l" id="3 -> 4"]
4 -> 5 [label="Line 2: \l[cond == 0]\l" id="4 -> 5"]
4 -> 6 [label="Line 2: \l[!(cond == 0)]\l" id="4 -> 6"]
6 -> 10 [label="Line 0: \ldefault return\l" id="6 -> 10"]
10 -> 11 [label="Line 13: \lReturn edge from __VERIFIER_assert to main: __VERIFIER_assert(x == y);\l" id="10 -> 11"]
11 -> 12 [label="Line 15: \l[x == y]\l" id="11 -> 12"]
11 -> 13 [label="Line 15: \l[!(x == y)]\l" id="11 -> 13"]
13 -> 14 [label="Line 19: \lint y_1 = 7;\l" id="13 -> 14"]
14 -> 18 [label="Line 0: \l\l" id="14 -> 18"]
18 -> 19 [label="Line 21: \l__retres = 0;\l" id="18 -> 19"]
19 -> 20 [label="Line 22: \lreturn __retres;\l" id="19 -> 20"]
12 -> 16 [label="Line 16: \lint y_0 = 6;\l" id="12 -> 16"]
16 -> 18 [label="Line 0: \l\l" id="16 -> 18"]
}
